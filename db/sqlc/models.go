// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type USERROLE string

const (
	USERROLEADMIN  USERROLE = "ADMIN"
	USERROLECLIENT USERROLE = "CLIENT"
	USERROLEDRIVER USERROLE = "DRIVER"
)

func (e *USERROLE) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = USERROLE(s)
	case string:
		*e = USERROLE(s)
	default:
		return fmt.Errorf("unsupported scan type for USERROLE: %T", src)
	}
	return nil
}

type NullUSERROLE struct {
	USERROLE USERROLE `json:"USER_ROLE"`
	Valid    bool     `json:"valid"` // Valid is true if USERROLE is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUSERROLE) Scan(value interface{}) error {
	if value == nil {
		ns.USERROLE, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.USERROLE.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUSERROLE) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.USERROLE), nil
}

type USER struct {
	UserID      pgtype.UUID      `json:"user_id"`
	FirstName   string           `json:"first_name"`
	LastName    string           `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	UserRole    USERROLE         `json:"user_role"`
}
