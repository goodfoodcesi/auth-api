// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "USER" (first_name, last_name, phone_number, user_role, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, first_name, last_name, phone_number, user_role, created_at, updated_at
`

type CreateUserParams struct {
	FirstName   string           `json:"first_name"`
	LastName    string           `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	UserRole    USERROLE         `json:"user_role"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

type CreateUserRow struct {
	UserID      pgtype.UUID      `json:"user_id"`
	FirstName   string           `json:"first_name"`
	LastName    string           `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	UserRole    USERROLE         `json:"user_role"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.UserRole,
		arg.UpdatedAt,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.UserRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "USER"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, first_name, last_name, phone_number, user_role, created_at, updated_at FROM "USER"
WHERE user_id = $1
`

type GetUserByIdRow struct {
	UserID      pgtype.UUID      `json:"user_id"`
	FirstName   string           `json:"first_name"`
	LastName    string           `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	UserRole    USERROLE         `json:"user_role"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUserById(ctx context.Context, userID pgtype.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.UserRole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, first_name, last_name, phone_number, user_role, created_at, updated_at FROM "USER"
`

type ListUsersRow struct {
	UserID      pgtype.UUID      `json:"user_id"`
	FirstName   string           `json:"first_name"`
	LastName    string           `json:"last_name"`
	PhoneNumber string           `json:"phone_number"`
	UserRole    USERROLE         `json:"user_role"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.UserRole,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "USER" SET
first_name = coalesce($1, first_name),
last_name = coalesce($2, last_name),
phone_number = coalesce($3, phone_number),
user_role = coalesce($4, user_role),
updated_at = CURRENT_TIMESTAMP
WHERE user_id = $5
RETURNING user_id, first_name, last_name, phone_number, created_at, updated_at, user_role
`

type UpdateUserParams struct {
	FirstName   pgtype.Text  `json:"first_name"`
	LastName    pgtype.Text  `json:"last_name"`
	PhoneNumber pgtype.Text  `json:"phone_number"`
	UserRole    NullUSERROLE `json:"user_role"`
	UserID      pgtype.UUID  `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (USER, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.UserRole,
		arg.UserID,
	)
	var i USER
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserRole,
	)
	return i, err
}
